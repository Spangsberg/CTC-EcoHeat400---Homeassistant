esphome:
  name: ctc-ecohet412-v2
  friendly_name: CTC-Ecohet412-v2

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: 'SSID'
  password: '<Password>'
  


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-064D30"
    password: "KWW0DapBzwsM"

captive_portal:    

dallas:
  - pin: 
      number: GPIO2
      mode:
          input: true
          pullup: true

uart:
  id: mod_bus
  tx_pin: 13
  rx_pin: 14
  baud_rate: 9600
  parity: EVEN
  stop_bits: 1

modbus:
  flow_control_pin: 12
  id: modbus1

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10

select:
  - platform: modbus_controller
    name: "Heating mode"
    address: 0x0000F066
    value_type: S_WORD
    optionsmap:
      "Auto": 0
      "On": 1
      "Off": 2

  - platform: modbus_controller
    name: "Heatpump Blocked"
    address: 0x0000F051
    value_type: S_WORD
    optionsmap:
      "Blocked": 0
      "Allowed": 1
switch:
  - platform: gpio
    name: "SMART-A"
    id: smart_a
    pin: 4
    
  - platform: gpio
    name: "SMART-B"
    id: smart_b
    pin: 5          
  
  - platform: template
    name: "SMART-A+B"

    turn_on_action:
      - switch.turn_on: smart_a
      - switch.turn_on: smart_b
    turn_off_action:
      - switch.turn_off: smart_a
      - switch.turn_off: smart_b




sensor:

  

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Kompressor Status"
    id: compressor_status
    register_type: read
    #state_class: "measurement"
    address: 0x0000F241
    #unit_of_measurement: "°C"
    #device_class: "enum"
    accuracy_decimals: 0
    value_type: S_WORD

  - platform: dallas
    address: 0x770516a04a4eff28
    name: "Temperatur Fyrrum2"

  

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Adjustment"
    id: adjustment
    register_type: read
    address: 0x0000F04D
    state_class: "measurement"
    accuracy_decimals: 0
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Outdoor temperature"
    id: outdoor_temp
    register_type: read
    address: 0x025E
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Upper tank temperature"
    id: upper_tank_temp
    register_type: read
    address: 0x0259
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  
      
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Lower tank temperature"
    id: lower_tank_temp
    register_type: read
    address: 0x025B
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Primary Flow Temp"
    id: pri_flo_temp
    register_type: read
    address: 0x025F
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1     

  

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Brine ind"
    id: brine_ind
    register_type: read
    address: 0x0000F287
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1
    

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Brine ud"
    id: brine_ud
    register_type: read
    address: 0x0000F291
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1
        

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Radiator retur"
    id: radiator_retur
    register_type: read
    address: 0x0000F23F
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Radiator frem"
    id: radiator_frem
    register_type: read
    address: 0x0000F23B
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Condenser in"
    id: con_in
    register_type: read
    address: 0x025D
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Condenser out"
    id: con_out
    register_type: read
    address: 0x025C
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    value_type: S_WORD
    filters:
      - multiply: 0.1      

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Heating status"
    id: heating_status
    register_type: read
    address: 0x0000F066
    state_class: "measurement"
    value_type: U_WORD

  

  

  
    
number:
  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: inclination_number
    name: "Kurvehældning"
    address: 0x0000F049
    value_type: U_WORD
    min_value: 25
    max_value: 85
    mode: box
    step: 1
    lambda: "return  x * 0.1; "
    write_lambda: |-
      ESP_LOGD("main","Modbus Number incoming value = %f",x);
      return x * 10.0 ;
    ## multiply is ignored because lamdba is used
    multiply: 1
    
  - platform: modbus_controller
    modbus_controller_id: epever
    id: forskydning
    name: "Forskydning"
    address: 0x0000F04D
    value_type: S_WORD
    min_value: -20
    max_value: 20
    mode: box
    step: 1
    lambda: "return  x * 0.1; "
    write_lambda: |-
      return x * 10.0 ;
    ## multiply is ignored because lamdba is used
    multiply: 1

  

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: brine_pump
    name: "Brine pumpe"
    register_type: read
    address: 0x028A
    bitmask: 0x30 #(bit 3)
 
